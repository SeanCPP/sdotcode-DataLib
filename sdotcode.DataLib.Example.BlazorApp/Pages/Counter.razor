@page "/counter"

<PageTitle>Counter</PageTitle>

<div class="form-group">
    <input type="text" @bind-value=nameSearch />
    <button class="btn btn-primary" @onclick=Search>Search</button>
</div>

<div class="my-lg-5"/>

<div class="form-group">
    <label for="formName">Name</label>
    <input id="formName" class="form-control" type="text" @bind-value=searchModel.Name />
</div>
<div class="form-group">
    <label for="formEmail">Email</label>
    <input id="formEmail" class="form-control" type="text" @bind-value=searchModel.Email />
</div>
<button class="btn btn-primary" @onclick=FormSearch>Search</button>

<div class="my-lg-5"/>

@if (people.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <th scope="row">@person.Id</th>
                    <td>@person.Name</td>
                    <td>@person.Email</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    [Inject] Service<PersonModel>? service { get; set; }

    private string nameSearch = string.Empty;
    private SearchPersonModel searchModel = new();

    IEnumerable<PersonModel> people = new List<PersonModel>();

    private async Task Search()
    {
        people = await service!.SearchAsync(nameSearch, 
            pagingOptions: default,
            x => x.Name, 
            x => x.Id); // This won't get searched since the Id property on PersonModel doesn't have [Searchable]
    }

    private async Task FormSearch()
    {
        people = await service!.SearchAsync(searchModel, pagingOptions: default);
    }
}